

/********************

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <sqlca.h>


EXEC SQL INCLUDE ORACA;


	
EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR		username[20];
	VARCHAR 	password[20];
		
	VARCHAR     strA[11];
	VARCHAR     strB[11];
EXEC SQL END   DECLARE SECTION;
	
	
int  sample_select();
void  sql_error(char * msg);

int  main(int argc, char *argv[])
{

    int  nReturn = sample_select();	
	
	return nReturn;
}

int  sample_select()
{
	strcpy((char*)username.arr, "ahn");
	username.len = (short)strlen((char*)username.arr);
	
	strcpy((char*)password.arr, "ahn");
	password.len = (short)strlen((char*)password.arr);

  
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE errro--");
	
	EXEC SQL CONNECT :username IDENTIFIED BY :password;	

	if( sqlca.sqlcode != 0)
	{
		printf("[ERROR] Connect Error SQL_MSG : [%d]\n", sqlca.sqlerrm.sqlerrmc);
		exit(0);
	}


	// Declare the cursor. All static SQL explicit cursors 
	EXEC SQL DECLARE  salespeople  CURSOR FOR
		SELECT A, B
		FROM	TEST;
		
	// Open the cursor 
	EXEC SQL OPEN salespeople;
	
	// Get ready to print result 
	printf("Test Table Commission\n");
	printf("------------   -------------");
	
	char  chA[20], chB[20];
	
	for(;;)
	{
		memset(chA, 0x00, 20);
		memset(chB, 0x00, 20);
		
		EXEC SQL FETCH salespeople INTO :strA, :strB;
		
		if( sqlca.sqlcode > 0 ) {
			strncpy( chA, (char*)strA.arr, strA.len);
			strncpy( chB, (char*)strB.arr, strB.len);
			
			printf(" A = [%s] B = [%s] \n", chA, chB);
		} else if( sqlca.sqlcode < 0 ) {
			printf(" ORACLE ERROR NUMBER [%d] \n", sqlca.sqlcode );
			
			exit(0);
		}
	}
	
	// Close the cursor 
	EXEC SQL CLOSE salespeople;
	
	EXEC SQL COMMIT WORK RELEASE;
	
	exit(0);

	return 1;
	
}
	
void  sql_error(char * msg)
{
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	
	printf("\n ORACLE error detected !! %s\n", msg);
	
	EXEC SQL ROLLBACK RELEASE;
	exit(1);
}

**/

/*********************************************************************/


#include <stdio.h>
#include <string.h>

EXEC SQL INCLUDE SQLCA;

int main() {

    // Start Session
    EXEC SQL BEGIN DECLARE SECTION;
		int id = 0;
		int i  = 0;	
		VARCHAR		user[20];
		VARCHAR 	pass[20];
		VARCHAR     strA[11];
		VARCHAR     strB[11];
	EXEC SQL END DECLARE SECTION;		
		
	strcpy((char*)user.arr, "ahn");
	user.len = (short)strlen((char*)user.arr);
	
	strcpy((char*)pass.arr, "ahn");
	pass.len = (short)strlen((char*)pass.arr);

    // Connect Database
    EXEC SQL WHENEVER SQLERROR GOTO error_msg;
        
	EXEC SQL CONNECT :user IDENTIFIED BY :pass;// using :tnsname;
    
 	if( sqlca.sqlcode == 0 ) {
			
		printf("Connect successful\n");
		
	} else if( sqlca.sqlcode < 0 ) {
			
		printf("[ERROR] Connect Error SQL_MSG : [%d]\n", sqlca.sqlerrm.sqlerrmc);
				
		exit(0);
	}	   

	// Declare the cursor. All static SQL explicit cursors 
	EXEC SQL DECLARE  test_cursor  CURSOR FOR
		SELECT A, B
		FROM   TEST;
		
	// Open the cursor 
	EXEC SQL OPEN test_cursor;	
    EXEC SQL WHENEVER NOT FOUND DO break;	

	// Get ready to print result 
	printf("Test Table Commission\n");
	printf("-------  ---------\n");
	
	char  chA[20], chB[20];
	
	for(;;)
	{
		memset(chA, 0x00, 20);
		memset(chB, 0x00, 20);
		
		EXEC SQL FETCH test_cursor INTO :strA, :strB;
		
		if( sqlca.sqlcode == 0 ) {
			strncpy( chA, (char*)strA.arr, strA.len);
			strncpy( chB, (char*)strB.arr, strB.len);
			
			printf(" A = [%s] B = [%s] \n", chA, chB);
		} else if( sqlca.sqlcode != 0 ) {
			printf(" ORACLE ERROR NUMBER [%d] \n", sqlca.sqlcode );
			
			exit(0);
		}
	}
	
    EXEC SQL close test_cursor;

    EXEC SQL commit work release;

    return 0;

		
error_msg:
        printf("Connect failed\n");
		
        return -1;

}

/*********************************************************************/



